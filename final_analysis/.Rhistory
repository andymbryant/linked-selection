robustness.test.main$pvalue=apply(robustness.test.main[,c(6,7,8)], 1, function(x) pf(x[1], x[2], x[3], lower.tail=F))
head(robustness.test.main)
#FIGURE 3#
#set up colors
ne.main$plotcol = NA
ne.main$plotcol[ne.main$kingdom=="animal"] = "blue1"
#ne.main$plotcol[ne.main$spec == "agam" | ne.main$spec=="amel" | ne.main$spec=="bmor" | ne.main$spec=="cbri" | ne.main$spec=="cele" | ne.main$spec == "dmel" | ne.main$spec=="dpse" | ne.main$spec == "hmel"] = "blue3"
ne.main$plotcol[ne.main$kingdom=="plant"] = "green4"
#ne.main$plotcol[ne.main$spec == "ccle" | ne.main$spec=="grai" | ne.main$spec=="pper" | ne.main$spec == "ptri"] = "green4"
#part A
pdf(file="Figure3A.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logrange, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Range (sq km)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty="l")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="plant",]), col="green4")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="animal",]), col="blue1")
mtext("A", 3, at=c(2.7), cex=1.5, line=0.5)
dev.off()
#part B
pdf(file="Figure3B.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logsize, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Size (meters)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty='l')
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="plant",]), col="darkgreen")
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="animal",]), col="blue")
mtext("B", 3, at=c(-3.5), cex=1.5, line=0.5)
dev.off()
#part C
pdf(file="Figure3C.pdf")
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.1 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.01"), expression("0.01 < P "<=" 0.05"), expression("0.05 < P "<=" 0.1"), "P > 0.1"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
dev.off()
robustness.test.main
names(robustness.test.main)
#packages
require(plyr)
require(glmulti)
#load final table for analysis
ne<-read.table("../pogen_models/ne_final_table.out", header=T, stringsAsFactors=F)
#update qc params
qc.params<-read.table("../spec_props/qc_params.txt", header=T, sep="\t")
ne=ne[,-c(26,27,28,29,30)]
ne<-merge(ne, qc.params, by.x="spec", by.y="sp")
rm(qc.params)
#define some additional variables
ne$placed.frac = ne$placed.bp / ne$assembly.bp
ne$ungapped.frac = ne$placed.ungapped.bp / ne$placed.bp
ne$logsize = log10(ne$size.m)
ne$logrange = log10(ne$area)
#main subset described in manuscript
#500kb windows, standard filtering, U estimated as mutation rate * exonic bases, and variable hitchhiking model (accounting for differences in gene density across windows)
ne.main<-subset(ne, wind==500 & filt=="std" & mod.set=="set1" & U=="min")
#basic default model
mod.bio.full<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+logrange:kingdom+logsize:logrange+logsize:logrange:kingdom, data=ne.main)
drop1(mod.bio.full, test="F") #test 3-way interaction
mod.bio.2nd<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+logrange:kingdom+logsize:logrange, data=ne.main)
drop1(mod.bio.2nd, test="F") #test all 2-way interactions
mod.bio.final<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom, data=ne.main)
##ROBUSTNESS TESTS###
#nuisance + bio model
mod.nuis.all<-lm(selstr.best ~ genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good, data=ne.main)
drop1(mod.nuis.all, test="F") # test all nuisance parameters
mod.nuis.bio<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good,data=ne.main)
#test whether bio parameters are significant after including nuisance parameters
anova(mod.nuis.all, mod.nuis.bio, test="F")
#residual model final
mod.res.final<-lm(residuals(lm(selstr.best ~ genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good,data=ne.main))~ne.main$logrange+ne.main$logsize+ne.main$kingdom+ne.main$logsize:ne.main$kingdom)
mod.final.nodom<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom, data=ne.main[ne.main$domesticated=="no",])
mod.final.animal<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="animal",])
mod.final.plant<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="plant",])
#now we can getadjR2 from models for each variable set
robustness.test.main<-ddply(ne, .(wind, filt, U, mod.set), summarize, adjr2=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$adj.r.squared, fstat=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[1], numdf=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[2], dendf=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[3])
robustness.test.main$pvalue=apply(robustness.test.main[,c(6,7,8)], 1, function(x) pf(x[1], x[2], x[3], lower.tail=F))
#FIGURE 3#
#set up colors
ne.main$plotcol = NA
ne.main$plotcol[ne.main$kingdom=="animal"] = "blue1"
#ne.main$plotcol[ne.main$spec == "agam" | ne.main$spec=="amel" | ne.main$spec=="bmor" | ne.main$spec=="cbri" | ne.main$spec=="cele" | ne.main$spec == "dmel" | ne.main$spec=="dpse" | ne.main$spec == "hmel"] = "blue3"
ne.main$plotcol[ne.main$kingdom=="plant"] = "green4"
#ne.main$plotcol[ne.main$spec == "ccle" | ne.main$spec=="grai" | ne.main$spec=="pper" | ne.main$spec == "ptri"] = "green4"
#part A
pdf(file="Figure3A.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logrange, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Range (sq km)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty="l")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="plant",]), col="green4")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="animal",]), col="blue1")
mtext("A", 3, at=c(2.7), cex=1.5, line=0.5)
dev.off()
#part B
pdf(file="Figure3B.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logsize, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Size (meters)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty='l')
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="plant",]), col="darkgreen")
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="animal",]), col="blue")
mtext("B", 3, at=c(-3.5), cex=1.5, line=0.5)
dev.off()
#part C
pdf(file="Figure3C.pdf")
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.1 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.01"), expression("0.01 < P "<=" 0.05"), expression("0.05 < P "<=" 0.1"), "P > 0.1"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
dev.off()
sort(robustness.test.main$pvalue)
summary(mod.bio.final)
summary(ne.main)
summary(mod.bio.final)
robustness.test.main[robustness.test.main$U=="min" &robustness.test.main$filt=="std",]
sort(robustness.test.main$pvalue)
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.001 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.01"), expression("0.01 < P "<=" 0.05"), expression("0.05 < P "<=" 0.1"), "P > 0.1"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.001 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.001"), expression("0.001 < P "<=" 0.01"), expression("P "<=" 0.05"), "P > 0.05"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.001 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.001"), expression("0.001 < P "<=" 0.01"), expression("P < 0.01 "<=" 0.05"), "P > 0.05"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.001 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.001"), expression("0.001 < P "<=" 0.01"), expression("0.01 < P "<=" 0.05"), "P > 0.05"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
rm(list=ls())
#packages
require(plyr)
require(glmulti)
#load final table for analysis
ne<-read.table("../pogen_models/ne_final_table.out", header=T, stringsAsFactors=F)
#update qc params
qc.params<-read.table("../spec_props/qc_params.txt", header=T, sep="\t")
ne=ne[,-c(26,27,28,29,30)]
ne<-merge(ne, qc.params, by.x="spec", by.y="sp")
rm(qc.params)
#define some additional variables
ne$placed.frac = ne$placed.bp / ne$assembly.bp
ne$ungapped.frac = ne$placed.ungapped.bp / ne$placed.bp
ne$logsize = log10(ne$size.m)
ne$logrange = log10(ne$area)
#main subset described in manuscript
#500kb windows, standard filtering, U estimated as mutation rate * exonic bases, and variable hitchhiking model (accounting for differences in gene density across windows)
ne.main<-subset(ne, wind==500 & filt=="std" & mod.set=="set1" & U=="min")
#basic default model
mod.bio.full<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+logrange:kingdom+logsize:logrange+logsize:logrange:kingdom, data=ne.main)
drop1(mod.bio.full, test="F") #test 3-way interaction
mod.bio.2nd<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+logrange:kingdom+logsize:logrange, data=ne.main)
drop1(mod.bio.2nd, test="F") #test all 2-way interactions
mod.bio.final<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom, data=ne.main)
##ROBUSTNESS TESTS###
#nuisance + bio model
mod.nuis.all<-lm(selstr.best ~ genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good, data=ne.main)
drop1(mod.nuis.all, test="F") # test all nuisance parameters
mod.nuis.bio<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom+genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good,data=ne.main)
#test whether bio parameters are significant after including nuisance parameters
anova(mod.nuis.all, mod.nuis.bio, test="F")
#residual model final
mod.res.final<-lm(residuals(lm(selstr.best ~ genome.size.mb + prop.good + placed.frac + rec.rate + ungapped.frac + density.good,data=ne.main))~ne.main$logrange+ne.main$logsize+ne.main$kingdom+ne.main$logsize:ne.main$kingdom)
mod.final.nodom<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom, data=ne.main[ne.main$domesticated=="no",])
mod.final.animal<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="animal",])
mod.final.plant<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="plant",])
#now we can getadjR2 from models for each variable set
robustness.test.main<-ddply(ne, .(wind, filt, U, mod.set), summarize, adjr2=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$adj.r.squared, fstat=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[1], numdf=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[2], dendf=summary(lm(selstr.best ~ logsize+logrange+kingdom+logsize:kingdom))$fstatistic[3])
robustness.test.main$pvalue=apply(robustness.test.main[,c(6,7,8)], 1, function(x) pf(x[1], x[2], x[3], lower.tail=F))
#FIGURE 3#
#set up colors
ne.main$plotcol = NA
ne.main$plotcol[ne.main$kingdom=="animal"] = "blue1"
#ne.main$plotcol[ne.main$spec == "agam" | ne.main$spec=="amel" | ne.main$spec=="bmor" | ne.main$spec=="cbri" | ne.main$spec=="cele" | ne.main$spec == "dmel" | ne.main$spec=="dpse" | ne.main$spec == "hmel"] = "blue3"
ne.main$plotcol[ne.main$kingdom=="plant"] = "green4"
#ne.main$plotcol[ne.main$spec == "ccle" | ne.main$spec=="grai" | ne.main$spec=="pper" | ne.main$spec == "ptri"] = "green4"
#part A
pdf(file="Figure3A.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logrange, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Range (sq km)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty="l")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="plant",]), col="green4")
abline(lm(selstr.best ~ logrange, data=ne.main[ne.main$kingdom=="animal",]), col="blue1")
mtext("A", 3, at=c(2.7), cex=1.5, line=0.5)
dev.off()
#part B
pdf(file="Figure3B.pdf")
par(mar=c(5,5,3,1))
plot(ne.main$selstr.best ~ ne.main$logsize, col=ne.main$plotcol, pch=16, xlab=expression('Log'[10]*' Size (meters)'), ylab="Impact of Selection", las=1, ylim=c(0,0.8), bty='l')
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="plant",]), col="darkgreen")
abline(lm(selstr.best ~ logsize, data=ne.main[ne.main$kingdom=="animal",]), col="blue")
mtext("B", 3, at=c(-3.5), cex=1.5, line=0.5)
dev.off()
#part C
pdf(file="Figure3C.pdf")
par(mar=c(8,5,3,1))
robustness.test.main$U=factor(robustness.test.main$U, levels=c("min", "const", "max"))
robustness.test.main$plotcol=NA
robustness.test.main$plotcol[robustness.test.main$pvalue<0.001 & is.na(robustness.test.main$plotcol)]="orangered3"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.01 & is.na(robustness.test.main$plotcol)]="darkorange"
robustness.test.main$plotcol[robustness.test.main$pvalue<0.05 & is.na(robustness.test.main$plotcol)]="goldenrod1"
robustness.test.main$plotcol[is.na(robustness.test.main$plotcol)]="gray50"
robustness.test.main=robustness.test.main[order(robustness.test.main$U, robustness.test.main$wind, robustness.test.main$filt, robustness.test.main$mod.set),]
robustness.test.main$label=with(robustness.test.main, paste(U,filt,mod.set,wind,sep="."))
plot(robustness.test.main$adjr2, xaxt="n", ylab=expression("Adjusted R"^2), col="gray20", type="h", las=2, ylim=c(0,0.8), bty="l", xlab="")
points(robustness.test.main$adjr2, pch=16, type="p", col=robustness.test.main$plotcol)
axis(1, labels=c(as.character(robustness.test.main$label)), at=c(1:length(robustness.test.main$label)), las=2, cex.axis=0.65)
legend("topright", col=c("orangered3", "darkorange", "goldenrod1", "gray50"), legend=c(expression("P "<=" 0.001"), expression("0.001 < P "<=" 0.01"), expression("0.01 < P "<=" 0.05"), "P > 0.05"), pch=16, bty="n")
mtext("Model Parameters (U, Filtering, Model Set, Window Size)", side=1, line=6)
mtext("C", side=3, line=0.5, at=-2)
dev.off()
summary(mod.bio.final)
summary(mod.res.final)
mod.res.nogs<-lm(residuals(lm(selstr.best ~ prop.good + placed.frac + rec.rate + ungapped.frac + density.good,data=ne.main))~ne.main$logrange+ne.main$logsize+ne.main$kingdom+ne.main$logsize:ne.main$kingdom)
summary(mod.res.nogs)
summary(mod.nuis.bio)
summary(mod.nuis.all)
anova(mod.nuis.all, mod.nuis.bio, test="F")
mod.final.nodom<-lm(selstr.best ~ logrange+logsize+kingdom+logsize:kingdom, data=ne.main[ne.main$domesticated=="no",])
mod.final.animal<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="animal",])
mod.final.plant<-lm(selstr.best ~ logrange+logsize, data=ne.main[ne.main$kingdom=="plant",])
summary(mod.final.nodom)
summary(mod.final.ani)
summary(mod.final.animal)
summary(mod.final.plant)
rm(list=ls())
source('~/Projects/linkedselection/linked-selection/final_analysis/correlation_analysis.R', echo=TRUE)
by(cor.res.main$tau, cor.res.main$class.inter, median)
by(cor.res.main$tau, cor.res.main$class.inter, mean)
by(cor.res.main$tau, cor.res.main$class.inter, median)
by(cor.res.main$tau, cor.res.main$class.inter, mean)
by(cor.res.main$tau, cor.res.main$class.inter, median)
cor.res.robust
cor.res.robust<-ddply(cor.res, .(kingdom, filt, wind), summarise, pvalue=pvalue(wilcox_test(tau ~ droplevels(class.inter))), effect.size=median(tau[class.inter=="vert" | class.inter=="herb"])-median(tau[class.inter=="invert" | class.inter=="woody"]))
cor.res.robust
cor.res.robust<-ddply(cor.res, .(kingdom, filt, wind), summarise, pvalue=pvalue(wilcox_test(tau ~ droplevels(class.inter))), effect.size=median(tau[class.inter=="invert" | class.inter=="herb"])-median(tau[class.inter=="vert" | class.inter=="woody"]))
cor.res.robust
cor.res.main
#load final table for analysis
ne<-read.table("../pogen_models/ne_final_table.out", header=T, stringsAsFactors=F)
#update qc params
qc.params<-read.table("../spec_props/qc_params.txt", header=T, sep="\t")
ne=ne[,-c(26,27,28,29,30)]
ne<-merge(ne, qc.params, by.x="spec", by.y="sp")
rm(qc.params)
#define some additional variables
ne$placed.frac = ne$placed.bp / ne$assembly.bp
ne$ungapped.frac = ne$placed.ungapped.bp / ne$placed.bp
ne$logsize = log10(ne$size.m)
ne$logrange = log10(ne$area)
#main subset described in manuscript
#500kb windows, standard filtering, U estimated as mutation rate * exonic bases, and variable hitchhiking model (accounting for differences in gene density across windows)
ne.main<-subset(ne, wind==500 & filt=="std" & mod.set=="set1" & U=="min")
select.results<-ddply(ne.main[,c("spec", "wind", "U", "rec", "selfing")], .(spec, wind, U, rec, selfing), splat(get_mod_results))
select.results=subset(select.results, filt=="std")
#reformat
require(reshape2)
select.modset.1<-droplevels(subset(select.results, model=="neutral" | model=="hh_only(var)" | model=="bgs_only(var)" | model=="full(hh_var)"))
select.modset.2<-droplevels(subset(select.results, model=="neutral" | model=="hh_only(const)" | model=="bgs_only(var)" | model=="full(hh_const)"))
select.modset.1$mod.set="set1" #set1 is variable hitchhiking, variable bgs
select.modset.2$mod.set="set2" #set2 is constant hitchhiking, variable bgs
select.modset.merge<-rbind(select.modset.1, select.modset.2)
select.modset.merge$model=sub("\\(\\w+\\)","", select.modset.merge$model)
select.modset.merge$model=sub("_only", "", select.modset.merge$model)
#get relative likelihoods of each
rel.lik.models=ddply(.data=select.modset.merge, .variables=.(spec, mod.set), summarise, min.aic=min(best.aic, na.rm=T))
rel.lik.models=merge(rel.lik.models, select.modset.merge)
rel.lik.models=rel.lik.models[,c("spec", "mod.set", "model", "best.aic", "best.ll", "min.aic")]
rel.lik.models$rel.lik=exp((rel.lik.models$min.aic - rel.lik.models$best.aic)/2)
norm.factor=ddply(.data=rel.lik.models, .variables=.(spec,mod.set), summarise, norm.factor=sum(rel.lik))
rel.lik.models=merge(rel.lik.models, norm.factor)
rel.lik.models$norm.lik=rel.lik.models$rel.lik/rel.lik.models$norm.factor
#hh vs bgs
rel.lik.hhvsbgs=subset(rel.lik.models, mod.set=="set1" & (model=="bgs" | model=="full"))
hhvsbgs.final=ddply(.data=rel.lik.hhvsbgs, .variables=.(spec), summarise, min.aic=min(best.aic), full.aic=best.aic[model=="full"], bgs.aic=best.aic[model=="bgs"])
hhvsbgs.final$hh.rel=exp((hhvsbgs.final$min.aic - hhvsbgs.final$full.aic)/2)
hhvsbgs.final$bgs.rel=exp((hhvsbgs.final$min.aic - hhvsbgs.final$bgs.aic)/2)
hhvsbgs.final$hh.v.bgs = log2(hhvsbgs.final$hh.rel/hhvsbgs.final$bgs.rel)
#get best model for each spec, mod.set
best.model=ddply(.data=rel.lik.models, .variables=.(spec,mod.set), summarise, best.model=model[rel.lik==1], rel.lik.best=norm.lik[rel.lik==1], rel.lik.hh=norm.lik[model=="hh"]+norm.lik[model=="full"], rel.lik.bgs=norm.lik[model=="bgs"], rel.lik.neut=norm.lik[model=="neutral"])
#add best model info to ne.main
ne.best=merge(ne.main, best.model)
ne.best$best.model.plot=ne.best$best.model
ne.best$best.model.plot[ne.best$best.model=="full"]="hh"
ne.best$best.model.plot=factor(ne.best$best.model.plot, levels=c("neutral", "bgs", "hh"))
ne.best$hh.conf=cut(ne.best$rel.lik.hh, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
ne.best$neut.conf=cut(ne.best$rel.lik.neut, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
ne.best$bgs.conf=cut(ne.best$rel.lik.bgs, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
#significance tests, categorical
require(coin)
wilcox_test(ne.best$logrange ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
#hh
ne.best=merge(ne.best, hhvsbgs.final)
ne.best$rangeclass = cut(ne.best$logrange, c(-100,median(ne.best$logrange), 100), labels=c("low", "high"))
ne.best$sizeclass = cut(ne.best$logsize, c(-100,median(ne.best$logsize), 100), labels=c("low", "high"))
ne.best$nc.class = paste(ne.best$sizeclass, ne.best$rangeclass, sep=".")
ne.best$nc.class[ne.best$nc.class=="high.low"]="low"
ne.best$nc.class[ne.best$nc.class=="low.high"]="high"
ne.best$nc.class[ne.best$nc.class=="low.low"]="med"
ne.best$nc.class[ne.best$nc.class=="high.high"]="med"
ne.best$nc.class = factor(ne.best$nc.class, levels=c("low", "med", "high"))
ne.best$nc.class.2="med"
ne.best$nc.class.2[ne.best$logsize > quantile(ne.best$logsize, 0.60) & ne.best$logrange < quantile(ne.best$logrange, 0.40)]="low"
ne.best$nc.class.2[ne.best$logsize < quantile(ne.best$logsize, 0.40) & ne.best$logrange > quantile(ne.best$logrange, 0.60)]="high"
wilcox_test(ne.best$logrange ~ as.factor(ne.best$hh.conf != "low"))
wilcox_test(ne.best$logsize ~ as.factor(ne.best$hh.conf != "low"))
wilcox_test(ne.best$rel.lik.hh[ne.best$nc.class!="med"] ~ droplevels(ne.best$nc.class[ne.best$nc.class!="med"]))
#Figure 4A
pdf(file="Figure4A.pdf")
par(mar=c(5,5,3,1), xpd=NA)
stripchart(ne.best$logrange ~ ne.best$neut.conf, vert=T, pch=16, at=c(0.2,0.7,1.2), xlim=c(0,1.4), ylim=c(3,8), las=1, ylab=expression('Log'[10]*' Range (sq km)'), xlab="Support for Neutral Model", group.names=c("Low", "Medium", "High"), frame.plot=F)
points(x=c(0.2, 0.7, 1.2), y=c(median(ne.best$logrange[ne.best$neut.conf=="low"]), median(ne.best$logrange[ne.best$neut.conf=="med"]), median(ne.best$logrange[ne.best$neut.conf=="high"])), pch=18, col="red", cex=2)
lines(x=c(0.2,0.7), y=c(8.1,8.1), col="black", lwd=1)
lines(x=c(0.2,(0.7+1.2)/2), y=c(8.25,8.25), col="black", lwd=1)
lines(x=c(0.2,1.2), y=c(8.4,8.4), col="black", lwd=1)
text(x=0.45, y=8.15, label="*", cex=1.5)
text(x=0.575, y=8.3, label="**", cex=1.5)
text(x=0.7, y=8.45, label="*", cex=1.5)
dev.off()
#Figure 4B
pdf(file="Figure4B.pdf")
par(mar=c(5,5,3,1), xpd=NA)
stripchart(ne.best$logsize ~ ne.best$neut.conf, vert=T, pch=16, at=c(0.2,0.7,1.2), xlim=c(0,1.4), ylim=c(-3.5,2), las=1, ylab=expression('Log'[10]*' Size (m)'), xlab="Support for Neutral Model", group.names=c("Low", "Medium", "High"), frame.plot=F)
points(x=c(0.2, 0.7, 1.2), y=c(median(ne.best$logsize[ne.best$neut.conf=="low"]), median(ne.best$logsize[ne.best$neut.conf=="med"]), median(ne.best$logsize[ne.best$neut.conf=="high"])), pch=18, col="red", cex=2)
lines(x=c(0.2,0.7), y=c(1.9,1.9), col="black", lwd=1)
lines(x=c(0.2,(0.7+1.2)/2), y=c(2.05,2.05), col="black", lwd=1)
lines(x=c(0.2,1.2), y=c(2.2,2.2), col="black", lwd=1)
text(x=0.45, y=1.95, label="***", cex=1.5)
text(x=0.575, y=2.10, label="***", cex=1.5)
text(x=0.7, y=2.25, label="*", cex=1.5)
dev.off()
source("../linkedsel_functions.R")
require(plyr)
#load final table for analysis
ne<-read.table("../pogen_models/ne_final_table.out", header=T, stringsAsFactors=F)
#update qc params
qc.params<-read.table("../spec_props/qc_params.txt", header=T, sep="\t")
ne=ne[,-c(26,27,28,29,30)]
ne<-merge(ne, qc.params, by.x="spec", by.y="sp")
rm(qc.params)
#define some additional variables
ne$placed.frac = ne$placed.bp / ne$assembly.bp
ne$ungapped.frac = ne$placed.ungapped.bp / ne$placed.bp
ne$logsize = log10(ne$size.m)
ne$logrange = log10(ne$area)
ne.main<-subset(ne, wind==500 & filt=="std" & mod.set=="set1" & U=="min")
select.results<-ddply(ne.main[,c("spec", "wind", "U", "rec", "selfing")], .(spec, wind, U, rec, selfing), splat(get_mod_results))
select.results=subset(select.results, filt=="std")
#reformat
require(reshape2)
select.modset.1<-droplevels(subset(select.results, model=="neutral" | model=="hh_only(var)" | model=="bgs_only(var)" | model=="full(hh_var)"))
select.modset.2<-droplevels(subset(select.results, model=="neutral" | model=="hh_only(const)" | model=="bgs_only(var)" | model=="full(hh_const)"))
select.modset.1$mod.set="set1" #set1 is variable hitchhiking, variable bgs
select.modset.2$mod.set="set2" #set2 is constant hitchhiking, variable bgs
select.modset.merge<-rbind(select.modset.1, select.modset.2)
select.modset.merge$model=sub("\\(\\w+\\)","", select.modset.merge$model)
select.modset.merge$model=sub("_only", "", select.modset.merge$model)
#get relative likelihoods of each
rel.lik.models=ddply(.data=select.modset.merge, .variables=.(spec, mod.set), summarise, min.aic=min(best.aic, na.rm=T))
rel.lik.models=merge(rel.lik.models, select.modset.merge)
rel.lik.models=rel.lik.models[,c("spec", "mod.set", "model", "best.aic", "best.ll", "min.aic")]
rel.lik.models$rel.lik=exp((rel.lik.models$min.aic - rel.lik.models$best.aic)/2)
norm.factor=ddply(.data=rel.lik.models, .variables=.(spec,mod.set), summarise, norm.factor=sum(rel.lik))
rel.lik.models=merge(rel.lik.models, norm.factor)
rel.lik.models$norm.lik=rel.lik.models$rel.lik/rel.lik.models$norm.factor
#hh vs bgs
rel.lik.hhvsbgs=subset(rel.lik.models, mod.set=="set1" & (model=="bgs" | model=="full"))
hhvsbgs.final=ddply(.data=rel.lik.hhvsbgs, .variables=.(spec), summarise, min.aic=min(best.aic), full.aic=best.aic[model=="full"], bgs.aic=best.aic[model=="bgs"])
hhvsbgs.final$hh.rel=exp((hhvsbgs.final$min.aic - hhvsbgs.final$full.aic)/2)
hhvsbgs.final$bgs.rel=exp((hhvsbgs.final$min.aic - hhvsbgs.final$bgs.aic)/2)
hhvsbgs.final$hh.v.bgs = log2(hhvsbgs.final$hh.rel/hhvsbgs.final$bgs.rel)
#get best model for each spec, mod.set
best.model=ddply(.data=rel.lik.models, .variables=.(spec,mod.set), summarise, best.model=model[rel.lik==1], rel.lik.best=norm.lik[rel.lik==1], rel.lik.hh=norm.lik[model=="hh"]+norm.lik[model=="full"], rel.lik.bgs=norm.lik[model=="bgs"], rel.lik.neut=norm.lik[model=="neutral"])
#add best model info to ne.main
ne.best=merge(ne.main, best.model)
ne.best$best.model.plot=ne.best$best.model
ne.best$best.model.plot[ne.best$best.model=="full"]="hh"
ne.best$best.model.plot=factor(ne.best$best.model.plot, levels=c("neutral", "bgs", "hh"))
ne.best$hh.conf=cut(ne.best$rel.lik.hh, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
ne.best$neut.conf=cut(ne.best$rel.lik.neut, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
ne.best$bgs.conf=cut(ne.best$rel.lik.bgs, breaks=c(0,0.05,0.9,1), include.lowest=T, right=T, labels=c("low", "med", "high"))
#significance tests, categorical
require(coin)
wilcox_test(ne.best$logrange ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
wilcox_test(ne.best$logrange ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize ~ as.factor(ne.best$neut.conf != "low"))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="low"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="low"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="high"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="high"]))
wilcox_test(ne.best$logsize[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
wilcox_test(ne.best$logrange[ne.best$neut.conf!="med"] ~ droplevels(ne.best$neut.conf[ne.best$neut.conf!="med"]))
ne.best=merge(ne.best, hhvsbgs.final)
ne.best$rangeclass = cut(ne.best$logrange, c(-100,median(ne.best$logrange), 100), labels=c("low", "high"))
ne.best$sizeclass = cut(ne.best$logsize, c(-100,median(ne.best$logsize), 100), labels=c("low", "high"))
ne.best$nc.class = paste(ne.best$sizeclass, ne.best$rangeclass, sep=".")
ne.best$nc.class[ne.best$nc.class=="high.low"]="low"
ne.best$nc.class[ne.best$nc.class=="low.high"]="high"
ne.best$nc.class[ne.best$nc.class=="low.low"]="med"
ne.best$nc.class[ne.best$nc.class=="high.high"]="med"
ne.best$nc.class = factor(ne.best$nc.class, levels=c("low", "med", "high"))
ne.best$nc.class.2="med"
ne.best$nc.class.2[ne.best$logsize > quantile(ne.best$logsize, 0.60) & ne.best$logrange < quantile(ne.best$logrange, 0.40)]="low"
ne.best$nc.class.2[ne.best$logsize < quantile(ne.best$logsize, 0.40) & ne.best$logrange > quantile(ne.best$logrange, 0.60)]="high"
wilcox_test(ne.best$logrange ~ as.factor(ne.best$hh.conf != "low"))
wilcox_test(ne.best$logsize ~ as.factor(ne.best$hh.conf != "low"))
wilcox_test(ne.best$rel.lik.hh[ne.best$nc.class!="med"] ~ droplevels(ne.best$nc.class[ne.best$nc.class!="med"]))
#Figure 4A
pdf(file="Figure4A.pdf")
par(mar=c(5,5,3,1), xpd=NA)
stripchart(ne.best$logrange ~ ne.best$neut.conf, vert=T, pch=16, at=c(0.2,0.7,1.2), xlim=c(0,1.4), ylim=c(3,8), las=1, ylab=expression('Log'[10]*' Range (sq km)'), xlab="Support for Neutral Model", group.names=c("Low", "Medium", "High"), frame.plot=F)
points(x=c(0.2, 0.7, 1.2), y=c(median(ne.best$logrange[ne.best$neut.conf=="low"]), median(ne.best$logrange[ne.best$neut.conf=="med"]), median(ne.best$logrange[ne.best$neut.conf=="high"])), pch=18, col="red", cex=2)
lines(x=c(0.2,0.7), y=c(8.1,8.1), col="black", lwd=1)
lines(x=c(0.2,(0.7+1.2)/2), y=c(8.25,8.25), col="black", lwd=1)
lines(x=c(0.2,1.2), y=c(8.4,8.4), col="black", lwd=1)
text(x=0.45, y=8.15, label="*", cex=1.5)
text(x=0.575, y=8.3, label="**", cex=1.5)
text(x=0.7, y=8.45, label="*", cex=1.5)
dev.off()
#Figure 4B
pdf(file="Figure4B.pdf")
par(mar=c(5,5,3,1), xpd=NA)
stripchart(ne.best$logsize ~ ne.best$neut.conf, vert=T, pch=16, at=c(0.2,0.7,1.2), xlim=c(0,1.4), ylim=c(-3.5,2), las=1, ylab=expression('Log'[10]*' Size (m)'), xlab="Support for Neutral Model", group.names=c("Low", "Medium", "High"), frame.plot=F)
points(x=c(0.2, 0.7, 1.2), y=c(median(ne.best$logsize[ne.best$neut.conf=="low"]), median(ne.best$logsize[ne.best$neut.conf=="med"]), median(ne.best$logsize[ne.best$neut.conf=="high"])), pch=18, col="red", cex=2)
lines(x=c(0.2,0.7), y=c(1.9,1.9), col="black", lwd=1)
lines(x=c(0.2,(0.7+1.2)/2), y=c(2.05,2.05), col="black", lwd=1)
lines(x=c(0.2,1.2), y=c(2.2,2.2), col="black", lwd=1)
text(x=0.45, y=1.95, label="***", cex=1.5)
text(x=0.575, y=2.10, label="***", cex=1.5)
text(x=0.7, y=2.25, label="*", cex=1.5)
dev.off()
head(ne.main)
head(ne.best)
ne.best$spec[ne.best$nc.class=="low",]
ne.best$spec[ne.best$nc.class=="low"]
ne.best$spec[ne.best$nc.class=="med"]
ne.best$spec[ne.best$nc.class=="high"]
